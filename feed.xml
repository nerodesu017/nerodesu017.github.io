<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-05-06T22:34:27+03:00</updated><id>/feed.xml</id><title type="html">NeroAdventures</title><subtitle>The Adventures of a Rustacean named Nero</subtitle><author><name>GitHub User</name><email>your-email@domain.com</email></author><entry><title type="html">ANTIBOTS - PART II - What is AST Manipulation, What is Regex, Why Would I Prefer One Over The Other?</title><link href="/antibots/programming/2021/05/06/antibots-part-2.html" rel="alternate" type="text/html" title="ANTIBOTS - PART II - What is AST Manipulation, What is Regex, Why Would I Prefer One Over The Other?" /><published>2021-05-06T22:25:00+03:00</published><updated>2021-05-06T22:25:00+03:00</updated><id>/antibots/programming/2021/05/06/antibots-part-2</id><content type="html" xml:base="/antibots/programming/2021/05/06/antibots-part-2.html">&lt;h3 id=&quot;we-got-to-the-point-ive-been-waiting-for-ast-manipulation-and-regex&quot;&gt;We got to the point I’ve been waiting for: AST Manipulation and Regex.&lt;/h3&gt;

&lt;h3 id=&quot;first-what-is-regex-regex-is-short-for-regular-expression-which-basically-specifies-a-pattern-antibots-are-javascript-and-javascript-is-just-code-code-is-made-up-of-characters-so-the-whole-script-you-could-say-is-a-loooooooooong-string-regex-works-on-just-that-strings-you-can-match-anything-youd-like-aaaaaaand-anything-you-dont-like-heres-an-example-what-im-talking-about&quot;&gt;First, what is regex? Regex is short for “regular expression” which basically specifies a pattern. Antibots are javascript, and javascript is just code. Code is made up of characters, so the whole script you could say is a loooooooooong string. Regex works on just that… Strings! You can match anything you’d like… aaaaaaand anything you don’t like, here’s an example what I’m talking about:&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>Nero</name></author><category term="antibots" /><category term="programming" /><category term="antibot" /><category term="antibots" /><category term="programming" /><category term="ast" /><category term="manipulation" /><summary type="html">We got to the point I’ve been waiting for: AST Manipulation and Regex.</summary></entry><entry><title type="html">ANTIBOTS - PART I - A short introduction to the Sneaker Development Industry and Antibots</title><link href="/antibots/programming/2021/05/06/antibots-part-1.html" rel="alternate" type="text/html" title="ANTIBOTS - PART I - A short introduction to the Sneaker Development Industry and Antibots" /><published>2021-05-06T03:45:10+03:00</published><updated>2021-05-06T03:45:10+03:00</updated><id>/antibots/programming/2021/05/06/antibots-part-1</id><content type="html" xml:base="/antibots/programming/2021/05/06/antibots-part-1.html">&lt;h3 id=&quot;lets-imagine-for-a-second-you-want-to-bot-a-website-though-why-would-you-wanna-do-this-well-nowadays-there-are-quite-a-few-products-that-are-produced-in-low-quantity-and-the-demand-is-pretty-high-for-example-gpus-or-even-sneakers&quot;&gt;Let’s imagine for a second you want to bot a website. Though, why would you wanna do this? Well, nowadays, there are quite a few products that are produced in low quantity and the demand is pretty high. For example, GPUs or even sneakers.&lt;/h3&gt;

&lt;h3 id=&quot;you-spend-a-few-weeksmonths-researching-and-you-tell-yourself-youre-gonna-start-a-bot-of-your-own-as-a-personal-bot-or-even-to-give-it-out-to-people-as-well-all-goes-well-you-learn-http-about-requests-learn-how-to-use-chrome-dev-tools-and-everything-looks-perfect-theres-a-catch-though-these-websites-well-they-are-sought-by-a-lot-of-people-its-about-who-gets-there-first-and-checkouts-so-you-gotta-be-quick&quot;&gt;You spend a few weeks/months researching and you tell yourself you’re gonna start a bot of your own, as a personal bot or even to give it out to people as well. All goes well, you learn http, about requests, learn how to use Chrome Dev Tools and everything looks perfect! There’s a catch though, these websites, well, they are sought by a lot of people, it’s about who gets there first and checkouts, so you gotta be quick.&lt;/h3&gt;

&lt;h3 id=&quot;at-first-you-thought-a-browser-bot-would-be-enough-because-you-would-have-to-just-mimic-the-users-actions-theres-when-antibots-come-in-they-detect-those-browsers-so-you-dig-a-little-on-the-internet-and-you-find-that-there-are-packages-that-make-your-browser-undetected-success&quot;&gt;At first, you thought a browser bot would be enough, because you would have to just mimic the user’s actions.. There’s when antibots come in, they detect those browsers.. So you dig a little on the internet and you find that there are packages that make your browser undetected, success!!!&lt;/h3&gt;

&lt;h3 id=&quot;the-development-goes-all-well-and-then-you-find-yourself-still-not-being-able-to-checkout-cause-theres-not-only-you-that-thought-to-bot-this-way-so-what-would-be-faster&quot;&gt;The development goes all well, and then you find yourself still not being able to checkout, cause there’s not only you that thought to bot this way, so what would be faster?&lt;/h3&gt;

&lt;h3 id=&quot;going-request-mode-of-course-but-when-you-go-request-mode-theres-no-way-of-actually-going-about-the-antibot&quot;&gt;Going request mode, of course! But when you go request mode, there’s no way of actually going about the antibot.&lt;/h3&gt;

&lt;h2 id=&quot;these-antibots-are-especially-made-to-be-run-in-a-browser&quot;&gt;These antibots are especially made to be run in a browser.&lt;/h2&gt;

&lt;h3 id=&quot;first-we-have-to-understand-what-these-antibots-are-and-at-a-basic-level-how-they-work&quot;&gt;First, we have to understand what these antibots are and, at a basic level, how they work.&lt;/h3&gt;

&lt;h3 id=&quot;theres-quite-a-few-different-ways-antibots-can-detect-that-you-are-indeed-sending-illegitimate-requests-to-the-webserver-from-what-ive-seen-a-few-of-the-methods-are&quot;&gt;There’s quite a few different ways antibots can detect that you are indeed sending illegitimate requests to the webserver, from what I’ve seen a few of the methods are:&lt;/h3&gt;

&lt;h4 id=&quot;detecting-and-blocking-the-ip-you-are-sending-requests-from---when-you-want-to-bot-a-website-you-usually-want-to-get-as-much-quantity-of-a-product-as-you-can-there-are-people-who-have-the-funds-for-even-100-gpus-this-comes-with-a-bit-of-headache-at-first-wouldnt-you-get-blocked-by-the-website-if-you-sent-100-requests-from-your-pc-at-the-same-time-but-bingo-theres-a-solution-proxies-you-can-first-reroute-your-traffic-through-another-machine-so-that-the-website-thinks-you-are-sending-your-requests-from-another-location-these-antibots-that-im-talking-about-for-the-moment-datadome-gather-data-of-datacenters-and-botnets-that-exist-and-block-their-ips-these-seem-to-be-the-ones-we-cant-really-tackle-with-ast-manipulation-as-the-decisive-factor-if-the-user-cooks-or-not-its-the-user-himself-or-the-botnetdatacenter-proxies-the-user-uses&quot;&gt;Detecting and blocking the IP you are sending requests from - when you want to bot a website, you usually want to get as much quantity of a product as you can (there are people who have the funds for even 100 GPU’s). This comes with a bit of headache at first, wouldn’t you get blocked by the website if you sent 100 requests from your PC at the same time? But, bingo! There’s a solution, proxies! You can first reroute your traffic through another machine so that the website thinks you are sending your requests from another location! These antibots that I’m talking about (for the moment DataDome) gather data of datacenters and botnets that exist and block their ip’s, these seem to be the ones we can’t really tackle with AST manipulation as the decisive factor if the user cooks or not it’s the user himself or the botnet/datacenter proxies the user uses!&lt;/h4&gt;

&lt;h3 id=&quot;making-use-of-what-the-browser-has-to-offer-to-either-gather-data-and-send-it-to-an-endpoint-for-a-valid-cookie-or-just-generating-the-cookie-on-the-client-itself-what-the-browser-has-to-offer-is-related-to-its-ability-to-manipulate-the-dom-and-to-use-the-specific-browser-variables-window-document-navigator&quot;&gt;Making use of what the browser has to offer to either gather data and send it to an endpoint for a valid cookie, or just generating the cookie on the client itself! What the browser has to offer is related to its ability to manipulate the DOM and to use the specific browser variables (window, document, navigator)&lt;/h3&gt;

&lt;h2 id=&quot;we-are-going-to-focus-the-most-on-the-2nd-type-of-antibots&quot;&gt;We are going to focus the most on the 2nd type of antibots.&lt;/h2&gt;

&lt;h3 id=&quot;lets-expand-a-little-more-how-do-these-antibots-work-exactly-well-they-execute-a-series-of-instructions-checking-to-be-sure-there-exist-the-usual-browser-variables-and-even-use-the-browser-methods-to-manipulate-the-dom-to-make-sure-that-the-antibot-is-not-being-sandboxed&quot;&gt;Let’s expand a little more. How do these antibots work exactly? Well, they execute a series of instructions checking to be sure there exist the usual browser variables and even use the browser methods to manipulate the DOM to make sure that the antibot is not being sandboxed.&lt;/h3&gt;

&lt;h3 id=&quot;what-do-i-mean-by-sandboxing-well-now-i-have-to-deviate-again-but-its-for-a-good-cause-trust-me-lets-look-at-chrome-these-antibots-are-written-in-javascript-which-basically-powers-web-and-clientside-along-with-webassembly-but-kinda-no-antibot-uses-wa-at-the-moment-only-the-antibot-for-httpssupremenewyorkcom-called-ticket-tried-to-make-use-of-it-in-2020-and-it-was-a-disaster-needless-to-say-but-thats-for-another-time-chrome-uses-the-v8-engine-to-execute-javascript-more-about-it-here-httpsv8dev-sandboxing-means-to-try-and-execute-the-script-but-not-in-the-browser-specifically-the-browser-has-to-render-elements-on-the-screen-has-to-load-plugins-it-has-to-do-a-lot-of-things-that-eat-up-resources-up-until-a-decade-ago-2009-javascript-was-only-running-in-the-browser-until-someone-came-up-with-an-idea-to-make-use-of-the-v8-engine-to-make-it-run-javascript-outside-the-browser-and-thats-when-nodejs-was-created-nodejs-uses-only-the-v8-engine-and-doesnt-have-the-browser-variables-window-document-navigator-but-instead-has-some-other-variables-and-it-can-be-detected-pretty-easy-so-thats-why-we-have-to-be-careful&quot;&gt;What do I mean by sandboxing? Well (now I have to deviate again, but it’s for a good cause, trust me), let’s look at chrome. These antibots are written in javascript, which basically powers web and clientside (along with WebAssembly but kinda no antibot uses WA at the moment, only the antibot for https://supremenewyork.com called Ticket tried to make use of it in 2020 and it was a disaster needless to say, but that’s for another time). Chrome uses the V8 engine to execute javascript (more about it here: https://v8.dev). Sandboxing, means to try and execute the script, but not in the browser specifically. The browser has to render elements on the screen, has to load plugins, it has to do a lot of things that eat up resources. Up until a decade ago (2009) javascript was only running in the browser, until someone came up with an idea to make use of the V8 engine to make it run javascript outside the browser! And that’s when NodeJS was created. NodeJS uses only the V8 engine and doesn’t have the browser variables (window, document, navigator) but instead has some other variables and it can be detected pretty easy, so that’s why we have to be careful.&lt;/h3&gt;

&lt;h2 id=&quot;so-what-chance-do-we-have-at-this&quot;&gt;So what chance do we have at this?&lt;/h2&gt;

&lt;h3 id=&quot;by-now-youd-think-our-chances-are-pretty-slim-but-not-really-theres-ways-one-of-them-would-be-to-make-browser-bots-even-more-hidden-by-playing-with-the-variables-they-modify-and-trying-to-simulate-user-actions-better&quot;&gt;By now, you’d think our chances are pretty slim, but not really! There’s ways, one of them would be to make Browser Bots even more hidden by playing with the variables they modify and trying to simulate user actions better.&lt;/h3&gt;

&lt;h3 id=&quot;though-what-well-focus-on-is-trying-to-deobfuscate-these-antibots-see-how-they-work-and-make-working-gens-for-them&quot;&gt;Though, what we’ll focus on is trying to deobfuscate these antibots, see how they work and make working gens for them.&lt;/h3&gt;

&lt;h3 id=&quot;what-do-i-mean-by-deobfuscation-well-software-is-still-property-intellectual-property-in-the-beginning-of-the-information-era-obfuscation-was-used-to-make-sure-competitors-and-other-people-couldnt-just-steal-the-software-they-buy-repack-it-and-resell-it-there-are-also-laws-but-obfuscation-is-also-to-make-it-harder-to-even-replicate-because-it-does-some-transformations-that-dont-affect-the-computer-since-the-computer-executes-the-same-instructions-that-lead-to-the-same-result-but-its-certainly-harder-for-a-human-being-to-understand-the-underlying-way-the-program-executes&quot;&gt;What do I mean by deobfuscation? Well, software is still property, intellectual property. In the beginning of the information era obfuscation was used to make sure competitors and other people couldn’t just steal the software they buy, repack it and resell it (there are also laws, but obfuscation is also to make it harder to even replicate, because it does some transformations that don’t affect the computer since the computer executes the same instructions that lead to the same result, but it’s certainly harder for a human being to understand the underlying way the program executes).&lt;/h3&gt;

&lt;h3 id=&quot;in-our-era-obfuscation-is-heavily-used-for-antibots-so-users-cant-just-look-at-the-antibots-code-see-what-it-checks-for-directly-and-create-a-solution-that-would-bypass-it&quot;&gt;In our era, obfuscation is heavily used for antibots, so users can’t just look at the antibots code, see what it checks for directly and create a solution that would bypass it.&lt;/h3&gt;</content><author><name>Nero</name></author><category term="antibots" /><category term="programming" /><category term="antibot" /><category term="antibots" /><category term="programming" /><category term="ast" /><category term="manipulation" /><summary type="html">Let’s imagine for a second you want to bot a website. Though, why would you wanna do this? Well, nowadays, there are quite a few products that are produced in low quantity and the demand is pretty high. For example, GPUs or even sneakers.</summary></entry><entry><title type="html">Welcome To Jekyll</title><link href="/2021/05/06/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome To Jekyll" /><published>2021-05-06T00:00:00+03:00</published><updated>2021-05-06T00:00:00+03:00</updated><id>/2021/05/06/welcome-to-jekyll</id><content type="html" xml:base="/2021/05/06/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>GitHub User</name><email>your-email@domain.com</email></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>